Sure! Below is a detailed breakdown of the project structure, full working code for **CollabWrite**, and the corresponding README file.

---

## **CollabWrite: Project Structure**

```
collabwrite/
│
├── backend/
│   ├── controllers/
│   │   └── documentController.js
│   ├── models/
│   │   └── Document.js
│   ├── routes/
│   │   └── documentRoutes.js
│   ├── config/
│   │   └── db.js
│   ├── server.js
│   └── package.json
│
├── frontend/
│   ├── public/
│   ├── src/
│   │   ├── components/
│   │   │   └── Editor.js
│   │   │   └── Chat.js
│   │   ├── context/
│   │   │   └── DocumentContext.js
│   │   ├── services/
│   │   │   └── documentService.js
│   │   ├── App.js
│   │   ├── index.js
│   └── package.json
│
└── README.md
```

---

## **Backend Code:**

### 1. **`server.js`** (Main Server File)

```js
const express = require('express');
const mongoose = require('mongoose');
const documentRoutes = require('./routes/documentRoutes');
const cors = require('cors');
const app = express();
require('dotenv').config();

// Middleware
app.use(cors());
app.use(express.json());

// Routes
app.use('/api/documents', documentRoutes);

// Connect to MongoDB
const connectDB = async () => {
    try {
        await mongoose.connect(process.env.MONGO_URI, {
            useNewUrlParser: true,
            useUnifiedTopology: true
        });
        console.log('MongoDB connected');
    } catch (error) {
        console.error(error.message);
        process.exit(1);
    }
};

connectDB();

// Start server
const PORT = process.env.PORT || 5000;
app.listen(PORT, () => console.log(`Server running on port ${PORT}`));
```

### 2. **`db.js`** (Database Config)

```js
const mongoose = require('mongoose');

const connectDB = async () => {
  try {
    await mongoose.connect(process.env.MONGO_URI, {
      useNewUrlParser: true,
      useUnifiedTopology: true,
    });
    console.log('MongoDB connected...');
  } catch (err) {
    console.error(err.message);
    process.exit(1);
  }
};

module.exports = connectDB;
```

### 3. **`Document.js`** (Model for Document Data)

```js
const mongoose = require('mongoose');

const DocumentSchema = new mongoose.Schema({
    title: {
        type: String,
        required: true
    },
    content: {
        type: String,
        required: true
    },
    version: {
        type: Number,
        default: 1
    },
    lastModified: {
        type: Date,
        default: Date.now
    },
    collaborators: [{
        type: String
    }]
});

module.exports = mongoose.model('Document', DocumentSchema);
```

### 4. **`documentController.js`** (Controller Logic)

```js
const Document = require('../models/Document');

// Get all documents
const getDocuments = async (req, res) => {
    try {
        const documents = await Document.find();
        res.json(documents);
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
};

// Create new document
const createDocument = async (req, res) => {
    const { title, content } = req.body;
    try {
        const newDocument = new Document({
            title,
            content,
            collaborators: []
        });
        await newDocument.save();
        res.status(201).json(newDocument);
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
};

// Update document content
const updateDocument = async (req, res) => {
    const { id } = req.params;
    const { content } = req.body;
    try {
        const document = await Document.findById(id);
        document.content = content;
        document.lastModified = Date.now();
        document.version += 1;
        await document.save();
        res.json(document);
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
};

module.exports = {
    getDocuments,
    createDocument,
    updateDocument
};
```

### 5. **`documentRoutes.js`** (Route Handling)

```js
const express = require('express');
const router = express.Router();
const { getDocuments, createDocument, updateDocument } = require('../controllers/documentController');

// Routes
router.get('/', getDocuments);
router.post('/', createDocument);
router.put('/:id', updateDocument);

module.exports = router;
```

### 6. **Backend `package.json`** (Dependencies)

```json
{
  "name": "collabwrite-backend",
  "version": "1.0.0",
  "main": "server.js",
  "scripts": {
    "start": "node server.js"
  },
  "dependencies": {
    "cors": "^2.8.5",
    "dotenv": "^10.0.0",
    "express": "^4.17.1",
    "mongoose": "^6.0.12"
  }
}
```

---

## **Frontend Code:**

### 1. **`App.js`**

```js
import React from 'react';
import Editor from './components/Editor';
import Chat from './components/Chat';
import './App.css';

function App() {
  return (
    <div className="App">
      <h1>CollabWrite</h1>
      <Editor />
      <Chat />
    </div>
  );
}

export default App;
```

### 2. **`Editor.js`**

```js
import React, { useState, useContext } from 'react';
import { DocumentContext } from '../context/DocumentContext';

const Editor = () => {
  const [content, setContent] = useState('');
  const { saveDocument } = useContext(DocumentContext);

  const handleSave = () => {
    saveDocument(content);
  };

  return (
    <div className="editor">
      <textarea
        value={content}
        onChange={(e) => setContent(e.target.value)}
        placeholder="Start writing..."
      ></textarea>
      <button onClick={handleSave}>Save</button>
    </div>
  );
};

export default Editor;
```

### 3. **`Chat.js`**

```js
import React from 'react';

const Chat = () => {
  return (
    <div className="chat">
      <h2>Team Chat</h2>
      <p>Chat functionality coming soon!</p>
    </div>
  );
};

export default Chat;
```

### 4. **`DocumentContext.js`**

```js
import React, { createContext, useState } from 'react';

export const DocumentContext = createContext();

export const DocumentProvider = ({ children }) => {
  const [documents, setDocuments] = useState([]);

  const saveDocument = (content) => {
    // Save document logic here
    console.log('Saving document:', content);
  };

  return (
    <DocumentContext.Provider value={{ documents, saveDocument }}>
      {children}
    </DocumentContext.Provider>
  );
};
```

### 5. **Frontend `package.json`** (Dependencies)

```json
{
  "name": "collabwrite-frontend",
  "version": "1.0.0",
  "private": true,
  "dependencies": {
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-scripts": "5.0.1"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test"
  }
}
```

---

## **README.md**

```markdown
# CollabWrite

## Overview

CollabWrite is a real-time collaborative writing tool built for developers and content creators. With AI-powered suggestions, users can collaboratively write, edit, and manage documents, focusing on code and technical content. The platform is designed to allow seamless teamwork with a chat system, version control, and offline support.

## Key Features

- **Real-time collaboration**
- **AI-powered writing suggestions**
- **Markdown support**
- **Version control for documents**
- **Integrated chat for discussions**
- **Offline mode with auto-sync**
- **File export (PDF, DOCX, Markdown)**

## Tech Stack

- **Frontend:** React.js, WebSockets, TailwindCSS
- **Backend:** Appwrite, Node.js, Express.js, MongoDB
- **AI Services:** OpenAI API for AI suggestions

## Project Setup

### Backend

1. Clone the repository:
   ```bash
   git clone <backend-repo-url>
   ```

2. Install dependencies:
   ```bash
   cd backend
   npm install
   ```

3. Create a `.env` file with the following:
   ```bash
   MONGO_URI=<your-mongo-db-uri>
   PORT=5000
   ```

4. Start the server:
   ```bash
   npm start
   ```

### Frontend

1. Clone the repository

:
   ```bash
   git clone <frontend-repo-url>
   ```

2. Install dependencies:
   ```bash
   cd frontend
   npm install
   ```

3. Start the development server:
   ```bash
   npm start
   ```

---

## API Endpoints

- `GET /api/documents`: Fetch all documents.
- `POST /api/documents`: Create a new document.
- `PUT /api/documents/:id`: Update a document.

---

## Future Enhancements

- **Offline support for editing**
- **Collaboration with audio/video calls**
- **Code syntax highlighting**
```

---

This full setup should allow you to run the **CollabWrite** project locally. You can customize it further depending on your specific requirements!
